diff -ruN linux-6.2.3.orig/drivers/char/Makefile linux-6.2.3/drivers/char/Makefile
--- linux-6.2.3.orig/drivers/char/Makefile	2023-03-10 12:29:57.000000000 +0400
+++ linux-6.2.3/drivers/char/Makefile	2023-03-10 15:56:55.195646569 +0400
@@ -8,6 +8,7 @@
 obj-y				+= misc.o
 obj-$(CONFIG_ATARI_DSP56K)	+= dsp56k.o
 obj-$(CONFIG_VIRTIO_CONSOLE)	+= virtio_console.o
+obj-$(CONFIG_VIRTIO_PMEM_CHAR)	+= virtio_pmem_char.o
 obj-$(CONFIG_MSPEC)		+= mspec.o
 obj-$(CONFIG_UV_MMTIMER)	+= uv_mmtimer.o
 obj-$(CONFIG_IBM_BSR)		+= bsr.o
@@ -31,6 +32,7 @@
 obj-$(CONFIG_SCx200_GPIO)	+= scx200_gpio.o
 obj-$(CONFIG_PC8736x_GPIO)	+= pc8736x_gpio.o
 obj-$(CONFIG_NSC_GPIO)		+= nsc_gpio.o
+obj-$(CONFIG_GPIO_TB0219)	+= tb0219.o
 obj-$(CONFIG_TELCLOCK)		+= tlclk.o
 
 obj-$(CONFIG_MWAVE)		+= mwave/
diff -ruN linux-6.2.3.orig/drivers/char/virtio_pmem_char.c linux-6.2.3/drivers/char/virtio_pmem_char.c
--- linux-6.2.3.orig/drivers/char/virtio_pmem_char.c	1970-01-01 04:00:00.000000000 +0400
+++ linux-6.2.3/drivers/char/virtio_pmem_char.c	2023-03-10 15:56:55.196646570 +0400
@@ -0,0 +1,236 @@
+// Copyright 2022-2023 TII (SSRC) and the Ghaf contributors
+// SPDX-License-Identifier: Apache-2.0
+/*
+ * virtio_pmem.c: Virtio pmem char Driver
+ *
+ * Discovers persistent memory range information
+ * from host and registers the virtual pmem device
+ * with libnvdimm core.
+ */
+#include <linux/major.h>
+#include <linux/ioport.h>
+#include <linux/miscdevice.h>
+#include <linux/fs.h>
+#include "virtio_pmem_char.h"
+
+static struct virtio_device_id id_table[] = {
+	{ VIRTIO_ID_PMEM, VIRTIO_DEV_ANY_ID },
+	{ 0 },
+};
+
+static struct virtio_pmem *vpmem = NULL;
+static struct miscdevice pmem_miscdev;
+
+/* Initialize virt queue */
+static int init_vq(struct virtio_pmem *vpmem)
+{
+	/* single vq */
+	vpmem->req_vq = virtio_find_single_vq(vpmem->vdev, virtio_pmem_host_ack,
+					      "flush_queue");
+	if (IS_ERR(vpmem->req_vq))
+		return PTR_ERR(vpmem->req_vq);
+
+	spin_lock_init(&vpmem->pmem_lock);
+	INIT_LIST_HEAD(&vpmem->req_list);
+
+	return 0;
+};
+
+static loff_t pmem_lseek(struct file *filp, loff_t off, int whence)
+{
+	loff_t newpos;
+
+	switch (whence) {
+	case SEEK_SET:
+		if (off >= vpmem->size) {
+			newpos = -ESPIPE;
+			goto out;
+		}
+		newpos = off;
+		break;
+
+	case SEEK_CUR:
+		newpos = filp->f_pos + off;
+		if (newpos >= vpmem->size) {
+			newpos = -ESPIPE;
+			goto out;
+		}
+		break;
+
+	case SEEK_END:
+		newpos = vpmem->size;
+		break;
+
+	default: /* can't happen */
+		newpos = -EINVAL;
+		goto out;
+	}
+
+	filp->f_pos = newpos;
+out:
+	return newpos;
+}
+
+static ssize_t pmem_write(struct file *file, const char __user *buf,
+			  size_t count, loff_t *ppos)
+{
+	loff_t pos = *ppos;
+	void *pmem_addr, *temp_buf = NULL;
+	unsigned long long map_start_addr;
+
+	if (count > vpmem->size - pos)
+		count = vpmem->size - pos;
+	if (!count)
+		return 0;
+
+	map_start_addr = vpmem->start + pos;
+	pmem_addr = ioremap(map_start_addr, count);
+	if (!pmem_addr)
+		return -ENOMEM;
+	temp_buf = kmalloc(count, GFP_USER);
+	if (!temp_buf)
+		count = -ENOMEM;
+		goto out;
+
+	if (copy_from_user(temp_buf, buf, count)) {
+		count = -EFAULT;
+		goto out;
+	}
+	memcpy_toio(pmem_addr, temp_buf, count);
+
+	*ppos += count;
+out:
+	iounmap(pmem_addr);
+	if (temp_buf)
+		kfree(temp_buf);
+
+	return count;
+}
+
+static ssize_t pmem_read(struct file *file, char __user *buf, size_t count,
+			 loff_t *ppos)
+{
+	loff_t pos = *ppos;
+	void *pmem_addr, *temp_buf = NULL;
+	unsigned long long map_start_addr;
+
+	if (count > vpmem->size - pos)
+		count = vpmem->size - pos;
+	if (!count)
+		return 0;
+
+	map_start_addr = vpmem->start + pos;
+	pmem_addr = ioremap(map_start_addr, count);
+	if (!pmem_addr) {
+		return -ENOMEM;
+	}
+	temp_buf = kmalloc(count, GFP_USER);
+	if (!temp_buf)
+	{
+		count = -ENOMEM;
+		goto out;
+	}
+
+	memcpy_fromio(temp_buf, pmem_addr, count);
+
+	if (copy_to_user(buf, temp_buf, count)) {
+		count = -EFAULT;
+		goto out;
+	}
+	*ppos += count;
+
+out:
+	iounmap(pmem_addr);
+	if (temp_buf)
+		kfree(temp_buf);
+
+	return count;
+}
+
+static int pmem_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	if (vm_iomap_memory(vma, vpmem->start, vpmem->size) < 0)
+		return -EIO;
+
+	vma->vm_flags = VM_IO | VM_PFNMAP | VM_DONTEXPAND | VM_DONTDUMP |
+			VM_MIXEDMAP | VM_READ | VM_WRITE;
+
+	return 0;
+}
+
+static const struct file_operations __maybe_unused pmem_fops = {
+	.llseek = 	pmem_lseek,
+	.read 	= 	pmem_read,
+	.write 	= 	pmem_write,
+	.mmap 	= 	pmem_mmap,
+};
+
+static int virtio_pmem_probe(struct virtio_device *vdev)
+{
+	struct resource *req;
+	int err = 0;
+
+	if (!vdev->config->get) {
+		dev_err(&vdev->dev, "%s failure: config access disabled\n",
+			__func__);
+		return -EINVAL;
+	}
+
+	vpmem = devm_kzalloc(&vdev->dev, sizeof(*vpmem), GFP_KERNEL);
+	if (!vpmem) {
+		err = -ENOMEM;
+		goto out_err;
+	}
+	vpmem->vdev = vdev;
+	vdev->priv = vpmem;
+	err = init_vq(vpmem);
+	if (err) {
+		dev_err(&vdev->dev, "failed to initialize virtio pmem vq's\n");
+		goto out_err;
+	}
+
+	virtio_cread_le(vpmem->vdev, struct virtio_pmem_config, start,
+			&vpmem->start);
+	virtio_cread_le(vpmem->vdev, struct virtio_pmem_config, size,
+			&vpmem->size);
+
+	req = devm_request_mem_region(&vdev->dev, vpmem->start, vpmem->size,
+				      dev_name(&vdev->dev));
+	if (!req) {
+		dev_warn(&vdev->dev, "could not reserve region\n");
+	} else {
+		dev_info(&vdev->dev, "reserved region %pR\n", req);
+	}
+
+	return misc_register(&pmem_miscdev);
+
+out_err:
+	return err;
+}
+
+static void virtio_pmem_remove(struct virtio_device *vdev)
+{
+	vdev->config->del_vqs(vdev);
+	virtio_reset_device(vdev);
+	devm_release_mem_region(&vdev->dev, vpmem->start, vpmem->size);
+	misc_deregister(&pmem_miscdev);
+}
+
+static struct virtio_driver virtio_pmem_driver = {
+	.driver.name 	= KBUILD_MODNAME,
+	.driver.owner 	= THIS_MODULE,
+	.id_table 		= id_table,
+	.probe 			= virtio_pmem_probe,
+	.remove 		= virtio_pmem_remove,
+};
+
+static struct miscdevice pmem_miscdev = {
+	.minor 	= MISC_DYNAMIC_MINOR,
+	.name 	= "pmem_char",
+	.fops 	= &pmem_fops,
+};
+
+module_virtio_driver(virtio_pmem_driver);
+MODULE_DEVICE_TABLE(virtio, id_table);
+MODULE_DESCRIPTION("Virtio pmem char driver");
+MODULE_LICENSE("GPL");
diff -ruN linux-6.2.3.orig/drivers/char/virtio_pmem_char.h linux-6.2.3/drivers/char/virtio_pmem_char.h
--- linux-6.2.3.orig/drivers/char/virtio_pmem_char.h	1970-01-01 04:00:00.000000000 +0400
+++ linux-6.2.3/drivers/char/virtio_pmem_char.h	2023-03-10 15:56:55.196646570 +0400
@@ -0,0 +1,50 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * virtio_pmem_char.h: virtio pmem character Driver
+ *
+ * Discovers persistent memory range information
+ * from host and provides a character device.
+ **/
+
+#ifndef _LINUX_VIRTIO_PMEM_CHAR_H
+#define _LINUX_VIRTIO_PMEM_CHAR_H
+
+#include <linux/module.h>
+#include <uapi/linux/virtio_pmem.h>
+#include <linux/libnvdimm.h>
+#include <linux/spinlock.h>
+
+struct virtio_pmem_request {
+	struct virtio_pmem_req req;
+	struct virtio_pmem_resp resp;
+
+	/* Wait queue to process deferred work after ack from host */
+	wait_queue_head_t host_acked;
+	bool done;
+
+	/* Wait queue to process deferred work after virt queue buffer avail */
+	wait_queue_head_t wq_buf;
+	bool wq_buf_avail;
+	struct list_head list;
+};
+
+struct virtio_pmem {
+	struct virtio_device *vdev;
+
+	/* Virtio pmem request queue */
+	struct virtqueue *req_vq;
+
+	/* List to store deferred work if virtqueue is full */
+	struct list_head req_list;
+
+	/* Synchronize virtqueue data */
+	spinlock_t pmem_lock;
+
+	/* Memory region information */
+	__u64 start;
+	__u64 size;
+};
+
+void virtio_pmem_host_ack(struct virtqueue *vq);
+int async_pmem_flush(struct nd_region *nd_region, struct bio *bio);
+#endif
diff -ruN linux-6.2.3.orig/drivers/nvdimm/Makefile linux-6.2.3/drivers/nvdimm/Makefile
--- linux-6.2.3.orig/drivers/nvdimm/Makefile	2023-03-10 12:29:57.000000000 +0400
+++ linux-6.2.3/drivers/nvdimm/Makefile	2023-03-10 16:19:44.742326410 +0400
@@ -5,6 +5,7 @@
 obj-$(CONFIG_X86_PMEM_LEGACY) += nd_e820.o
 obj-$(CONFIG_OF_PMEM) += of_pmem.o
 obj-$(CONFIG_VIRTIO_PMEM) += virtio_pmem.o nd_virtio.o
+obj-$(CONFIG_VIRTIO_PMEM_CHAR) += nd_virtio.o
 
 nd_pmem-y := pmem.o
 
diff -ruN linux-6.2.3.orig/drivers/virtio/Kconfig linux-6.2.3/drivers/virtio/Kconfig
--- linux-6.2.3.orig/drivers/virtio/Kconfig	2023-03-10 12:29:57.000000000 +0400
+++ linux-6.2.3/drivers/virtio/Kconfig	2023-03-10 16:22:31.049264952 +0400
@@ -97,6 +97,7 @@
 	tristate "Support for virtio pmem driver"
 	depends on VIRTIO
 	depends on LIBNVDIMM
+	depends on VIRTIO_PMEM_CHAR = "n"
 	help
 	  This driver provides access to virtio-pmem devices, storage devices
 	  that are mapped into the physical address space - similar to NVDIMMs
@@ -104,6 +105,16 @@
 
 	  If unsure, say Y.
 
+config VIRTIO_PMEM_CHAR
+        tristate "Support for virtio pmem char driver"
+        select VIRTIO
+        default m
+        help
+          Virtio memory sharing for use with hypervisors.
+
+          Enables driver for the /dev/misc/pmem_char device which may be used
+          for sharing memory with other virtual machines.
+
 config VIRTIO_BALLOON
 	tristate "Virtio balloon driver"
 	depends on VIRTIO
